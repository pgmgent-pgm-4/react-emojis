{"version":3,"sources":["app/EmojiResultRow.js","app/EmojiResults.js","app/SearchForm.js","app/index.js","app/App.js","reportWebVitals.js","index.js"],"names":["EmojiResultRow","title","symbol","className","EmojiResults","emojis","map","emojiData","SearchForm","onSearch","useState","searchStr","setSearchStr","type","value","placeholder","onChange","ev","target","App","filteredEmojis","setFilteredEmojis","href","rel","lcSearchString","toLowerCase","filter","e","includes","keywords","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6qsKAWeA,EATQ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAC9B,OACE,sBAAKC,UAAU,QAAf,UACE,sBAAMA,UAAU,gBAAhB,SAAiCD,IACjC,sBAAMC,UAAU,eAAhB,SAAgCF,QCavBG,EAdM,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACrB,OACE,qBAAKF,UAAU,gBAAf,SACGE,EAAOC,KAAI,SAAAC,GAAS,OACnB,cAAC,EAAD,CAEEL,OAAQK,EAAUL,OAClBD,MAAOM,EAAUN,OAFZM,EAAUN,a,OCYVO,EAnBI,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACCC,mBAAS,IADV,mBAC1BC,EAD0B,KACfC,EADe,KAUjC,OACE,qBAAKT,UAAU,eAAf,SACE,6CACU,uBAAOU,KAAK,OAAOC,MAAOH,EAAWI,YAAY,oBAAoBC,SAV9D,SAACC,GACpBL,EAAaK,EAAGC,OAAOJ,OACC,oBAAbL,GACTA,EAASQ,EAAGC,OAAOJ,gBCRVK,ECMH,WAAO,IAAD,EAC4BT,mBAASL,GADrC,mBACTe,EADS,KACOC,EADP,KAQhB,OACE,sBAAKlB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sCACO,8CADP,0BAGA,mBACEA,UAAU,WACVmB,KAAK,sBACLJ,OAAO,SACPK,IAAI,sBAJN,4BASF,cAAC,EAAD,CAAYd,SApBK,SAACE,GACpB,IAAMa,EAAiBb,EAAUc,cACjCJ,EAAkBhB,EAAOqB,QAAO,SAAAC,GAAC,OAAIA,EAAE1B,MAAMwB,cAAcG,SAASJ,IAAmBG,EAAEE,SAASJ,cAAcG,SAASJ,UAmBvH,cAAC,EAAD,CAAcnB,OAAQe,QCnBbU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4e9fa801.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst EmojiResultRow = ({title, symbol}) => {\r\n  return (\r\n    <div className=\"emoji\">\r\n      <span className=\"emoji__symbol\">{symbol}</span>\r\n      <span className=\"emoji__title\">{title}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmojiResultRow;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport EmojiResultRow from './EmojiResultRow';\r\n\r\nconst EmojiResults = ({emojis}) => {\r\n  return (\r\n    <div className=\"emoji-results\">\r\n      {emojis.map(emojiData => (\r\n        <EmojiResultRow\r\n          key={emojiData.title}\r\n          symbol={emojiData.symbol}\r\n          title={emojiData.title}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmojiResults;","import React, {useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SearchForm = ({onSearch}) => {\r\n  const [searchStr, setSearchStr] = useState('');\r\n\r\n  const handleChange = (ev) => {\r\n    setSearchStr(ev.target.value);\r\n    if (typeof onSearch === 'function') {\r\n      onSearch(ev.target.value);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"emoji-search\">\r\n      <label>\r\n        Search: <input type=\"text\" value={searchStr} placeholder=\"Search your emoji\" onChange={handleChange} />\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import App from './App';\r\nexport default App;","import {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport EmojiResults from './EmojiResults';\r\nimport emojis from './data/emojis.json';\r\nimport SearchForm from './SearchForm';\r\n\r\nconst App = () => {\r\n  const [filteredEmojis, setFilteredEmojis] = useState(emojis);\r\n\r\n  const handleSearch = (searchStr) => {\r\n    const lcSearchString = searchStr.toLowerCase();\r\n    setFilteredEmojis(emojis.filter(e => e.title.toLowerCase().includes(lcSearchString) || e.keywords.toLowerCase().includes(lcSearchString)))\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n      <SearchForm onSearch={handleSearch} />\r\n      <EmojiResults emojis={filteredEmojis} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}